{"version":3,"sources":["hello_reagent/core.cljs"],"mappings":";AAKA,GAAA,QAAAA,0CAAAC,+CAAAC;AAAA;AAAA,AAAA,AAASC,+BAAU,gDAAA,2CAAA,sDAAA,jJAACC;;AAEpB,iCAAA,jCAAMC;AAAN,AAAA,0FAAA,mDAAA,mFAAA,6LAAA,mFAAA,iDAAA,/QAEQ,AAAA,oFAAA,AAAAC,gBAAQH;;AAGhB,2BAAA,mFAAA,2CAAA,oDAAA,mBAAA,2CAAA,oDAAA,mBAAA,2CAAA,oDAAA,jbAAKI;AAEL,yBAAA,zBAAMC;AAAN,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,uBAAA,mFAAA,kDAGQ,AAACC,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAaG;AAAb,AAAA,0FAAA,gDAAyBA;GAAMP;;AAE5C,2BAAA,3BAAMQ;AAAN,AAAe,IAAAC,WAAA,mFAA2BR;IAA3BS,WAAgC,wBAAA,xBAAGE;AAAnC,AAAA,kIAAAH,SAAAC,oDAAAD,SAAAC,hMAACC,8DAAAA,iFAAAA;;AAEhB,0BAAA,1BAAeE;AAAf,AAIE,OAACL;;;AAEH,0BAAA,1BAAMM;AAAN,AAGE,mBAAA,ZAACC","names":["js/hello-reagent","js/hello-reagent.core","js/hello-reagent.core.app-state","hello-reagent.core/app-state","reagent.core.atom","hello-reagent.core/hello-world","cljs.core/deref","hello-reagent.core/marks","hello-reagent.core/wtf","cljs.core.map","p__39801","map__39802","cljs.core/--destructure-map","cljs.core.get","msg","hello-reagent.core/start","G__39803","G__39804","reagent.core/render-component","js/document","hello-reagent.core/init","hello-reagent.core/stop","js/console.log"],"sourcesContent":["(ns hello-reagent.core\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state (atom {:text \"Hello world!\"}))\n\n(defn hello-world []\n  [:div\n   [:h1 (:text @app-state)]\n   [:h3 \"Edit this and watch it change!\"]])\n\n(def marks [{:msg \"you fuck\"} {:msg \"you fede\"} {:msg \"you baddy\"}])\n\n(defn wtf []\n  [:div\n   [:h1 \"Mark zero...\"]\n   [:ul (map (fn [{:keys [msg]}] [:li msg]) marks)]])\n\n(defn start [] (reagent/render-component [wtf] (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}